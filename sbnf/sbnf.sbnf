extensions: sbnf

prototype = ( ~comment )* ;

comment{comment.line.number-sign} = '#+'{punctuation.definition.comment}
                                    ~'$\n?'
                                  ;

main = ( header # comments work too
       | rule
       )*
     ;

header = '[[:alnum:]_\-\.]+'{entity.name.tag}
         '(:)(.*)\n?'{string.unquoted}
       ;

rule = '[[:alnum:]_\-\.]+'{entity.name.function}
       parameters?
       options?
       `=`{keyword.operator.assignment}
       pattern
       `;`{punctuation.terminator.rule}
     ;

pattern = pattern-element (`|`{keyword.operator}? pattern)? ;

pattern-element = '~|!'{keyword.operator}?
                  pattern-item
                  '\*|\?'{keyword.control}?
                ;

pattern-item = literal options? embed-include?
             | regex options? embed-include?
             | group
             | '[[:alnum:]_\-\.]+'{variable.function} parameters?
             ;

group{meta.group} = `(`{punctuation.section.group.begin}
                    pattern
                    `)`{punctuation.section.group.end}
                  ;

literal{string.quoted, include-prototype: false}
    = '`'{punctuation.definition.string.begin}
      ~'`'{punctuation.definition.string.end}
    ;

regex{string.quoted, include-prototype: false}
= `'`{punctuation.definition.string.begin}
  %include[regex-prototype]{scope:source.regexp}
  `'`{punctuation.definition.string.end}
;

regex-prototype{include-prototype: false}
= ( ~( `\'`{constant.character.escape}
     | interpolation
     )
  )*
  ~'(?=\')'
;

options{include-prototype: false}
= '{'
  ( ~interpolation )*
  ~'}'
;

embed-include
= '%'
  'embed|include'{keyword}
  parameters
  options
;

interpolation{include-prototype: false}
= `#[`{punctuation.definition.placeholder.begin}
  parameter
  `]`{punctuation.definition.placeholder.end}
;

parameters = `[` parameter ( `,` parameter )* `]` ;

parameter = literal | regex | '[[:alnum:]_\-\.]+'{variable.parameter} ;
